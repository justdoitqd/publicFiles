diff --git a/arch/powerpc/lib/Makefile b/arch/powerpc/lib/Makefile
index 6539010..a2f9639 100644
--- a/arch/powerpc/lib/Makefile
+++ b/arch/powerpc/lib/Makefile
@@ -26,7 +26,8 @@ obj-$(CONFIG_PPC_BOOK3S_64) += copyuser_power7.o copypage_power7.o \
 			       memcpy_power7.o
 
 obj64-y	+= copypage_64.o copyuser_64.o mem_64.o hweight_64.o \
-	   string_64.o memcpy_64.o memcmp_64.o pmem.o
+	   string_64.o memcpy_64.o memcmp_64.o pmem.o \
+	   memcmp_cnt.o 
 
 obj64-$(CONFIG_SMP)	+= locks.o
 obj64-$(CONFIG_ALTIVEC)	+= vmx-helper.o
diff --git a/arch/powerpc/lib/memcmp_cnt.c b/arch/powerpc/lib/memcmp_cnt.c
new file mode 100644
index 0000000..f66b9d2
--- /dev/null
+++ b/arch/powerpc/lib/memcmp_cnt.c
@@ -0,0 +1,54 @@
+/*
+ * Copyright(c) 2017 IBM Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/export.h>
+#include <linux/string.h>
+#include <asm/page.h>
+#include <linux/printk.h>
+
+unsigned int memcmp_cnt_res[PAGE_SIZE + 1];
+int memcmp_cnt(char *s1, char *s2, size_t n)
+{
+	int i, res = 0, idx = 0;
+	for (i = 0; i < n; i++) {
+		if (*((unsigned char*)s1 + i) > *((unsigned char*)s2 + i)) {
+			res =  i + 1;
+			idx = i + 1;
+		}
+		else if (*((unsigned char*)s1 + i) < *((unsigned char*)s2 + i)) {
+			res = (0 - i - 1);
+			idx = i + 1;
+		}
+	}
+
+	if (res < sizeof(memcmp_cnt_res)/sizeof(memcmp_cnt_res[0]))
+		memcmp_cnt_res[idx]++;
+	return res;
+}
+
+void memcmp_cnt_clr(void) {
+	memset(memcmp_cnt_res, 0, sizeof(memcmp_cnt_res));
+}
+
+void memcmp_dump_res(void) {
+	int i = 0; 
+	printk(KERN_ERR "\n>>>>>>>>>>> memcmp_dump_res >>>>>>>>>>>>>>\n");
+        for (i = 0; i < sizeof(memcmp_cnt_res)/sizeof(memcmp_cnt_res[0]); i++) {
+                printk(KERN_ERR "[%04d]: %8d; ", i, memcmp_cnt_res[i]);
+                if (!(i % 8))
+                        printk(KERN_ERR "\n");
+        }
+	printk(KERN_ERR "\n<<<<<<<<<memcmp_dump_res <<<<<<<<<<<<<<<<<<n");
+}
+EXPORT_SYMBOL(memcmp_cnt);
+EXPORT_SYMBOL(memcmp_dump_res);
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 6364890..5994ced 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -199,6 +199,33 @@ static struct sysrq_key_op sysrq_mountro_op = {
 	.enable_mask	= SYSRQ_ENABLE_REMOUNT,
 };
 
+ATOMIC_NOTIFIER_HEAD(sysrq_v_notifier_list);
+ATOMIC_NOTIFIER_HEAD(sysrq_x_notifier_list);
+EXPORT_SYMBOL(sysrq_v_notifier_list);
+EXPORT_SYMBOL(sysrq_x_notifier_list);
+
+static void sysrq_handle_v(int key)
+{
+       atomic_notifier_call_chain(&sysrq_v_notifier_list, 0, NULL);
+}
+static struct sysrq_key_op sysrq_v_op = {
+       .handler        = sysrq_handle_v,
+       .help_msg       = "print ksm memcmp cnt",
+       .action_msg     = "start to print ksm memcmp cnt",
+       .enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
+static void sysrq_handle_x(int key)
+{
+       atomic_notifier_call_chain(&sysrq_x_notifier_list, 0, NULL);
+}
+static struct sysrq_key_op sysrq_x_op = {
+       .handler        = sysrq_handle_x,
+       .help_msg       = "clear ksm memcmp cnt",
+       .action_msg     = "start to clear ksm memcmp cnt",
+       .enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
 #ifdef CONFIG_LOCKDEP
 static void sysrq_handle_showlocks(int key)
 {
@@ -482,12 +509,12 @@ static struct sysrq_key_op *sysrq_key_table[36] = {
 	&sysrq_showstate_op,		/* t */
 	&sysrq_mountro_op,		/* u */
 	/* v: May be registered for frame buffer console restore */
-	NULL,				/* v */
+	&sysrq_v_op,			/* v */
 	&sysrq_showstate_blocked_op,	/* w */
 	/* x: May be registered on mips for TLB dump */
 	/* x: May be registered on ppc/powerpc for xmon */
 	/* x: May be registered on sparc64 for global PMU dump */
-	NULL,				/* x */
+	&sysrq_x_op,			/* x */
 	/* y: May be registered on sparc64 for global register dump */
 	NULL,				/* y */
 	&sysrq_ftrace_dump_op,		/* z */
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 52b7089..9dc51a8 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -501,6 +501,9 @@ extern int sysctl_panic_on_stackoverflow;
 
 extern bool crash_kexec_post_notifiers;
 
+extern struct atomic_notifier_head sysrq_v_notifier_list;
+extern struct atomic_notifier_head sysrq_x_notifier_list;
+
 /*
  * panic_cpu is used for synchronizing panic() and crash_kexec() execution. It
  * holds a CPU number which is executing panic() currently. A value of
diff --git a/mm/ksm.c b/mm/ksm.c
index e8d6c62..eeacfd89 100644
--- a/mm/ksm.c
+++ b/mm/ksm.c
@@ -984,6 +984,7 @@ static u32 calc_checksum(struct page *page)
 	return checksum;
 }
 
+int memcmp_cnt(char *s1, char *s2, size_t n);
 static int memcmp_pages(struct page *page1, struct page *page2)
 {
 	char *addr1, *addr2;
@@ -991,7 +992,7 @@ static int memcmp_pages(struct page *page1, struct page *page2)
 
 	addr1 = kmap_atomic(page1);
 	addr2 = kmap_atomic(page2);
-	ret = memcmp(addr1, addr2, PAGE_SIZE);
+	ret = memcmp_cnt(addr1, addr2, PAGE_SIZE);
 	kunmap_atomic(addr2);
 	kunmap_atomic(addr1);
 	return ret;
@@ -3088,6 +3089,27 @@ static const struct attribute_group ksm_attr_group = {
 };
 #endif /* CONFIG_SYSFS */
 
+void memcmp_dump_res(void);
+void memcmp_cnt_clr(void);
+
+static int ksm_memcmp_cnt_notifier_call(struct notifier_block *this, unsigned long ev, void *ptr) {
+	memcmp_dump_res();
+	return 0;
+}
+
+static struct notifier_block ksm_memcmp_cnt_dump_sysrq_block = {
+       .notifier_call = ksm_memcmp_cnt_notifier_call,
+};
+
+static int ksm_memcmp_clr_notifier_call(struct notifier_block *this, unsigned long ev, void *ptr) {
+	memcmp_cnt_clr();
+	return 0;
+}
+
+static struct notifier_block ksm_memcmp_cnt_clr_sysrq_block = {
+       .notifier_call = ksm_memcmp_clr_notifier_call,
+};
+
 static int __init ksm_init(void)
 {
 	struct task_struct *ksm_thread;
@@ -3125,6 +3147,12 @@ static int __init ksm_init(void)
 	/* There is no significance to this priority 100 */
 	hotplug_memory_notifier(ksm_memory_callback, 100);
 #endif
+
+	/* register memcmp cnt dump sysrq block */
+	atomic_notifier_chain_register(&sysrq_v_notifier_list,
+			&ksm_memcmp_cnt_dump_sysrq_block);
+	atomic_notifier_chain_register(&sysrq_x_notifier_list,
+			&ksm_memcmp_cnt_clr_sysrq_block);
 	return 0;
 
 out_free:
