From 940c004be16461cafb8666c57e708f43550c9b34 Mon Sep 17 00:00:00 2001
From: Simon Guo <wei.guo.simon@gmail.com>
Date: Mon, 14 May 2018 02:13:09 -0400
Subject: [PATCH] Add memcmp cnt function to measure KSM cnt bytes

Signed-off-by: Simon Guo <wei.guo.simon@gmail.com>
---
 arch/powerpc/lib/Makefile                          |   3 +-
 arch/powerpc/lib/memcmp_cnt.c                      |  57 +++++++
 drivers/tty/sysrq.c                                |  46 +++++-
 include/linux/kernel.h                             |   4 +
 mm/ksm.c                                           |  41 ++++-
 .../testing/selftests/powerpc/stringloops/Makefile |   6 +-
 .../powerpc/stringloops/memcmp_cnt_test.c          | 168 +++++++++++++++++++++
 7 files changed, 317 insertions(+), 8 deletions(-)
 create mode 100644 arch/powerpc/lib/memcmp_cnt.c
 create mode 100644 tools/testing/selftests/powerpc/stringloops/memcmp_cnt_test.c

diff --git a/arch/powerpc/lib/Makefile b/arch/powerpc/lib/Makefile
index 653901042ad7..a2f9639cc4c4 100644
--- a/arch/powerpc/lib/Makefile
+++ b/arch/powerpc/lib/Makefile
@@ -26,7 +26,8 @@ obj-$(CONFIG_PPC_BOOK3S_64) += copyuser_power7.o copypage_power7.o \
 			       memcpy_power7.o
 
 obj64-y	+= copypage_64.o copyuser_64.o mem_64.o hweight_64.o \
-	   string_64.o memcpy_64.o memcmp_64.o pmem.o
+	   string_64.o memcpy_64.o memcmp_64.o pmem.o \
+	   memcmp_cnt.o 
 
 obj64-$(CONFIG_SMP)	+= locks.o
 obj64-$(CONFIG_ALTIVEC)	+= vmx-helper.o
diff --git a/arch/powerpc/lib/memcmp_cnt.c b/arch/powerpc/lib/memcmp_cnt.c
new file mode 100644
index 000000000000..016bceaf529b
--- /dev/null
+++ b/arch/powerpc/lib/memcmp_cnt.c
@@ -0,0 +1,57 @@
+/*
+ * Copyright(c) 2017 IBM Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/export.h>
+#include <linux/string.h>
+#include <asm/page.h>
+#include <linux/printk.h>
+
+unsigned int memcmp_cnt_res[PAGE_SIZE + 1];
+int memcmp_cnt(char *s1, char *s2, size_t n)
+{
+	int i, res = 0, idx = 0;
+	for (i = 0; i < n; i++) {
+		if (*((unsigned char*)s1 + i) > *((unsigned char*)s2 + i)) {
+			res =  i + 1;
+			idx = i + 1;
+			break;
+		}
+		else if (*((unsigned char*)s1 + i) < *((unsigned char*)s2 + i)) {
+			res = (0 - i - 1);
+			idx = i + 1;
+			break;
+		}
+	}
+
+	if (idx < sizeof(memcmp_cnt_res)/sizeof(memcmp_cnt_res[0]))
+		memcmp_cnt_res[idx]++;
+	return res;
+}
+
+void memcmp_cnt_clr(void) {
+	memset(memcmp_cnt_res, 0, sizeof(memcmp_cnt_res));
+}
+
+void memcmp_dump_res(int bytes) {
+	int i = 0; 
+	int size = bytes ? bytes : sizeof(memcmp_cnt_res)/sizeof(memcmp_cnt_res[0]);
+	printk(KERN_ERR "\n>>>>>>>>>>> memcmp_dump_res[%d] >>>>>>>>>>>>>>\n", size);
+        for (i = 0; i < size; i++) {
+                printk(KERN_ERR "[%04d]: %8d; ", i, memcmp_cnt_res[i]);
+                if (!(i % 8))
+                        printk(KERN_ERR "\n");
+        }
+	printk(KERN_ERR "\n<<<<<<<<<memcmp_dump_res [%d] <<<<<<<<<<<<<<<<<<\n", size);
+}
+EXPORT_SYMBOL(memcmp_cnt);
+EXPORT_SYMBOL(memcmp_dump_res);
diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 6364890575ec..ca220fbf711d 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -199,6 +199,46 @@ static struct sysrq_key_op sysrq_mountro_op = {
 	.enable_mask	= SYSRQ_ENABLE_REMOUNT,
 };
 
+ATOMIC_NOTIFIER_HEAD(sysrq_v_notifier_list);
+ATOMIC_NOTIFIER_HEAD(sysrq_x_notifier_list);
+ATOMIC_NOTIFIER_HEAD(sysrq_y_notifier_list);
+EXPORT_SYMBOL(sysrq_v_notifier_list);
+EXPORT_SYMBOL(sysrq_x_notifier_list);
+EXPORT_SYMBOL(sysrq_y_notifier_list);
+
+static void sysrq_handle_v(int key)
+{
+       atomic_notifier_call_chain(&sysrq_v_notifier_list, 0, NULL);
+}
+static struct sysrq_key_op sysrq_v_op = {
+       .handler        = sysrq_handle_v,
+       .help_msg       = "print ksm memcmp cnt",
+       .action_msg     = "start to print ksm memcmp cnt",
+       .enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
+static void sysrq_handle_x(int key)
+{
+       atomic_notifier_call_chain(&sysrq_x_notifier_list, 0, NULL);
+}
+static struct sysrq_key_op sysrq_x_op = {
+       .handler        = sysrq_handle_x,
+       .help_msg       = "clear ksm memcmp cnt",
+       .action_msg     = "start to clear ksm memcmp cnt",
+       .enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
+static void sysrq_handle_y(int key)
+{
+       atomic_notifier_call_chain(&sysrq_y_notifier_list, 0, NULL);
+}
+static struct sysrq_key_op sysrq_y_op = {
+       .handler        = sysrq_handle_y,
+       .help_msg       = "print 1k memcmp cnt",
+       .action_msg     = "start to print 1k memcmp cnt",
+       .enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+
 #ifdef CONFIG_LOCKDEP
 static void sysrq_handle_showlocks(int key)
 {
@@ -482,14 +522,14 @@ static struct sysrq_key_op *sysrq_key_table[36] = {
 	&sysrq_showstate_op,		/* t */
 	&sysrq_mountro_op,		/* u */
 	/* v: May be registered for frame buffer console restore */
-	NULL,				/* v */
+	&sysrq_v_op,			/* v */
 	&sysrq_showstate_blocked_op,	/* w */
 	/* x: May be registered on mips for TLB dump */
 	/* x: May be registered on ppc/powerpc for xmon */
 	/* x: May be registered on sparc64 for global PMU dump */
-	NULL,				/* x */
+	&sysrq_x_op,			/* x */
 	/* y: May be registered on sparc64 for global register dump */
-	NULL,				/* y */
+	&sysrq_y_op,			/* y */
 	&sysrq_ftrace_dump_op,		/* z */
 };
 
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index 6a1eb0b0aad9..1b72a5bcd2f0 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -502,6 +502,10 @@ extern int sysctl_panic_on_stackoverflow;
 
 extern bool crash_kexec_post_notifiers;
 
+extern struct atomic_notifier_head sysrq_v_notifier_list;
+extern struct atomic_notifier_head sysrq_x_notifier_list;
+extern struct atomic_notifier_head sysrq_y_notifier_list;
+
 /*
  * panic_cpu is used for synchronizing panic() and crash_kexec() execution. It
  * holds a CPU number which is executing panic() currently. A value of
diff --git a/mm/ksm.c b/mm/ksm.c
index e3cbf9a92f3c..f7d89512069e 100644
--- a/mm/ksm.c
+++ b/mm/ksm.c
@@ -984,6 +984,7 @@ static u32 calc_checksum(struct page *page)
 	return checksum;
 }
 
+int memcmp_cnt(char *s1, char *s2, size_t n);
 static int memcmp_pages(struct page *page1, struct page *page2)
 {
 	char *addr1, *addr2;
@@ -991,7 +992,7 @@ static int memcmp_pages(struct page *page1, struct page *page2)
 
 	addr1 = kmap_atomic(page1);
 	addr2 = kmap_atomic(page2);
-	ret = memcmp(addr1, addr2, PAGE_SIZE);
+	ret = memcmp_cnt(addr1, addr2, PAGE_SIZE);
 	kunmap_atomic(addr2);
 	kunmap_atomic(addr1);
 	return ret;
@@ -3095,6 +3096,36 @@ static const struct attribute_group ksm_attr_group = {
 };
 #endif /* CONFIG_SYSFS */
 
+void memcmp_dump_res(int);
+void memcmp_cnt_clr(void);
+
+static int ksm_memcmp_cnt_notifier_call(struct notifier_block *this, unsigned long ev, void *ptr) {
+	memcmp_dump_res(0);
+	return 0;
+}
+
+static int ksm_memcmp_cnt_1k_notifier_call(struct notifier_block *this, unsigned long ev, void *ptr) {
+	memcmp_dump_res(1024);
+	return 0;
+}
+
+static struct notifier_block ksm_memcmp_cnt_dump_sysrq_block = {
+       .notifier_call = ksm_memcmp_cnt_notifier_call,
+};
+
+static struct notifier_block ksm_memcmp_cnt_dump1k_sysrq_block = {
+       .notifier_call = ksm_memcmp_cnt_1k_notifier_call,
+};
+
+static int ksm_memcmp_clr_notifier_call(struct notifier_block *this, unsigned long ev, void *ptr) {
+	memcmp_cnt_clr();
+	return 0;
+}
+
+static struct notifier_block ksm_memcmp_cnt_clr_sysrq_block = {
+       .notifier_call = ksm_memcmp_clr_notifier_call,
+};
+
 static int __init ksm_init(void)
 {
 	struct task_struct *ksm_thread;
@@ -3132,6 +3163,14 @@ static int __init ksm_init(void)
 	/* There is no significance to this priority 100 */
 	hotplug_memory_notifier(ksm_memory_callback, 100);
 #endif
+
+	/* register memcmp cnt dump sysrq block */
+	atomic_notifier_chain_register(&sysrq_v_notifier_list,
+			&ksm_memcmp_cnt_dump_sysrq_block);
+	atomic_notifier_chain_register(&sysrq_x_notifier_list,
+			&ksm_memcmp_cnt_clr_sysrq_block);
+	atomic_notifier_chain_register(&sysrq_y_notifier_list,
+			&ksm_memcmp_cnt_dump1k_sysrq_block);
 	return 0;
 
 out_free:
diff --git a/tools/testing/selftests/powerpc/stringloops/Makefile b/tools/testing/selftests/powerpc/stringloops/Makefile
index 1125e489055e..10f245e665be 100644
--- a/tools/testing/selftests/powerpc/stringloops/Makefile
+++ b/tools/testing/selftests/powerpc/stringloops/Makefile
@@ -1,10 +1,10 @@
 # SPDX-License-Identifier: GPL-2.0
 # The loops are all 64-bit code
 CFLAGS += -m64
-CFLAGS += -I$(CURDIR)
+CFLAGS += -I$(CURDIR) -ggdb
 
-TEST_GEN_PROGS := memcmp
-EXTRA_SOURCES := memcmp_64.S ../harness.c
+TEST_GEN_PROGS := memcmp_cnt_test
+EXTRA_SOURCES := ../harness.c
 
 include ../../lib.mk
 
diff --git a/tools/testing/selftests/powerpc/stringloops/memcmp_cnt_test.c b/tools/testing/selftests/powerpc/stringloops/memcmp_cnt_test.c
new file mode 100644
index 000000000000..751e3cfa39fd
--- /dev/null
+++ b/tools/testing/selftests/powerpc/stringloops/memcmp_cnt_test.c
@@ -0,0 +1,168 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <malloc.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+
+#define SIZE 256
+#define ITERATIONS 2000
+
+int memcmp_cnt_res[65536 + 1];
+
+int memcmp_cnt(char *s1, char *s2, size_t n)
+{
+	int i, res = 0, idx = 0;
+	for (i = 0; i < n; i++) {
+		if (*((unsigned char*)s1 + i) > *((unsigned char*)s2 + i)) {
+			res =  i + 1;
+			idx = i + 1;
+			break;
+		}
+		else if (*((unsigned char*)s1 + i) < *((unsigned char*)s2 + i)) {
+			res = (0 - i - 1);
+			idx = i + 1;
+			break;
+		}
+	}
+
+	if (idx < sizeof(memcmp_cnt_res)/sizeof(memcmp_cnt_res[0]))
+		memcmp_cnt_res[idx]++;
+	return res;
+}
+/* test all offsets and lengths */
+static int test_one(char *s1, char *s2)
+{
+	unsigned long offset = 0, size = SIZE;
+
+	int x, y;
+	unsigned long i;
+
+	y = memcmp(s1+offset, s2+offset, size);
+	x = memcmp_cnt(s1+offset, s2+offset, size);
+
+	if (((x ^ y) < 0) &&	/* Trick to compare sign */
+			((x | y) != 0)) { /* check for zero */
+		printf("memcmp returned %d, should have returned %d (offset %ld size %ld)\n", x, y, offset, size);
+
+		for (i = offset; i < offset+size; i++)
+			printf("%02x ", s1[i]);
+		printf("\n");
+
+		for (i = offset; i < offset+size; i++)
+			printf("%02x ", s2[i]);
+		printf("\n");
+		abort();
+	}
+
+	if (x < 0)
+		x = 0-x;
+
+	return x;
+}
+
+static int testcase(void)
+{
+	char *s1;
+	char *s2;
+	unsigned long i;
+
+	s1 = memalign(128, SIZE);
+	if (!s1) {
+		perror("memalign");
+		exit(1);
+	}
+
+	s2 = memalign(128, SIZE);
+	if (!s2) {
+		perror("memalign");
+		exit(1);
+	}
+
+	srandom(time(0));
+
+	for (i = 0; i < ITERATIONS; i++) {
+		unsigned long j;
+		unsigned long change;
+		int res = 0;
+
+		for (j = 0; j < SIZE; j++)
+			s1[j] = random();
+
+		memcpy(s2, s1, SIZE);
+
+		/* change one byte */
+		change = random() % SIZE;
+		change = 18;
+		s2[change] = s1[change] + 1;
+
+		res = test_one(s1, s2);
+		if (res != (change + 1)) {
+			printf("test_one return %d, but should return %ld: FAIL\n",
+					res, change + 1 );
+			perror("test_one return fail!\n");
+			exit(1);
+		}
+	}
+
+
+#if 1
+	srandom(1);
+
+	for (i = 0; i < ITERATIONS; i++) {
+		unsigned long j;
+		unsigned long change, min = SIZE;
+
+		for (j = 0; j < SIZE; j++)
+			s1[j] = random();
+
+		memcpy(s2, s1, SIZE);
+
+		/* change multiple bytes, 1/8 of total */
+		for (j = 0; j < SIZE / 8; j++) {
+			change = random() % SIZE;
+			change = 8;
+			if (min > change)
+				min = change;
+			s2[change] = s1[change] + 1;
+		}
+
+		if (test_one(s1, s2) != (min + 1)) {
+			perror("test_one 2 return fail!");
+			exit(1);
+		}
+	}
+#endif
+
+	return 0;
+}
+
+int main(void)
+{
+	int i, sum = 0;
+	//return test_harness(testcase, "memcmp");
+	testcase();
+
+	for (i = 0; i < SIZE+1; i+=8) {
+		printf("%d: %4d %4d %4d %4d %4d %4d %4d %4d\n",
+				i,
+				memcmp_cnt_res[i],
+				memcmp_cnt_res[i+1],
+				memcmp_cnt_res[i+2],
+				memcmp_cnt_res[i+3],
+				memcmp_cnt_res[i+4],
+				memcmp_cnt_res[i+5],
+				memcmp_cnt_res[i+6],
+				memcmp_cnt_res[i+7]);
+		sum += memcmp_cnt_res[i];
+		sum += memcmp_cnt_res[i+1];
+		sum += memcmp_cnt_res[i+2];
+		sum += memcmp_cnt_res[i+3];
+		sum += memcmp_cnt_res[i+4];
+		sum += memcmp_cnt_res[i+5];
+		sum += memcmp_cnt_res[i+6];
+		sum += memcmp_cnt_res[i+7];
+	}
+
+	printf("\n   sum = %d\n", sum);
+	return 0;
+}
-- 
2.14.1

